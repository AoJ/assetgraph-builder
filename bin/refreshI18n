#!/usr/bin/env node

var _ = require('underscore'),
    seq = require('seq'),
    AssetGraph = require('assetgraph'),
    transforms = require('../lib/transforms'),
    passError = require('assetgraph/lib/util/passError'),
    i18nTools = require('../lib/util/i18nTools'),
    uglifyAst = require('assetgraph/lib/util/uglifyAst'),
    urlTools = require('assetgraph/lib/util/urlTools'),
    commandLineOptions = require('optimist').
        usage('$0 [--label <labelName>=<dir> ...] --root <inputRootDirectory> --locale <localeId>,... <htmlFile>...').
        demand(['root', 'locale']).
        argv,
    localeIds = _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");}));

new AssetGraph({root: commandLineOptions.root}).on('afterTransform', function (transform, elapsedTime) {
    console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
}).on('error', function (err) {
    console.error(err.stack);
    process.exit(1);
}).queue(
    transforms.registerLabelsAsCustomProtocols(commandLineOptions.label),
    transforms.loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl)),
    transforms.populate({followRelations: {type: ['HtmlScript', 'JavaScriptOneInclude'], to: {url: AssetGraph.query.not(/^https?:/)}}}),
    function (assetGraph, cb) {
        // We don't want to overwrite the "initially dirty" assets, such as ext-base.js.
        assetGraph.findAssets({isDirty: true}).forEach(function (dirtyAsset) {
            dirtyAsset.isDirty = false;
        });
        var existingI18nRelations = assetGraph.findRelations({to: {type: 'I18n'}, from: {type: 'JavaScript'}});

        i18nTools.findOneTrOccurrences(assetGraph, assetGraph.findAssets({type: 'Html', isInitial: true}), passError(cb, function (oneTrOccurrencesByKey) {
            seq(_.keys(oneTrOccurrencesByKey))
                .seqEach(function (key) {
                    var occurrences = oneTrOccurrencesByKey[key];
                    if (occurrences.length > 1) {
                        for (var i = 1 ; i < occurrences.length ; i += 1) {
                            if (!_.isEqual(occurrences[0].defaultValueAst, occurrences[1].defaultValueAst)) {
                                console.warn("Default values for " + key + " are different");
                            }
                        }
                    }
                    i18nTools.getOrCreateI18nAssetForKey(assetGraph, key, oneTrOccurrencesByKey, this.into(key));
                })
                .seqEach(function (key) {
                    var i18nAsset = this.vars[key],
                        occurrences = oneTrOccurrencesByKey[key];
                    localeIds.forEach(function (localeId) {
                        var prioritizedLocaleIds = i18nTools.expandLocaleIdToPrioritizedList(localeId);
                        if (key in i18nAsset.parseTree) {
                            for (var i = 0 ; i < prioritizedLocaleIds.length ; i += 1) {
                                if (prioritizedLocaleIds[i] in i18nAsset.parseTree[key]) {
                                    return; // Already found, don't do anything
                                }
                            }
                        } else {
                            i18nAsset.parseTree[key] = {};
                        }
                        var leastSpecificLocaleId = prioritizedLocaleIds[prioritizedLocaleIds.length - 1],
                            value = null;
                        if (leastSpecificLocaleId === 'en' && occurrences[0].defaultValueAst) {
                            value = uglifyAst.astToObj(occurrences[0].defaultValueAst);
                        }
                        i18nAsset.parseTree[key][leastSpecificLocaleId] = value;
                        console.log(i18nAsset.url + ": " + key + " already found, added entry for " + leastSpecificLocaleId);
                        i18nAsset.markDirty();
                    });
                    this();
                })
                .seq(function () {
                    // Find the JavaScript => I18n relations that didn't exist when we started:
                    var newI18nRelationsByJavaScriptId = {};
                    assetGraph.findRelations({to: {type: 'I18n'}, from: {type: 'JavaScript'}}).forEach(function (i18nRelation) {
                        if (existingI18nRelations.indexOf(i18nRelation) === -1) {
                            (newI18nRelationsByJavaScriptId[i18nRelation.from.id] = newI18nRelationsByJavaScriptId[i18nRelation.from.id] || []).push(i18nRelation);
                        }
                    });
                    // Hack: Inject the new relations at the top of the file
                    _.each(newI18nRelationsByJavaScriptId, function (i18nRelations, javaScriptId) {
                        var javaScript = assetGraph.idIndex[javaScriptId];
                        javaScript.markDirty();
                        javaScript.getText = function (cb) {
                            javaScript.constructor.prototype.getText.call(this, passError(cb, function (text) {
                                var oneIncludeStatements = i18nRelations.map(function (i18nRelation) {
                                    return "one.include('" +
                                        urlTools.buildRelativeUrl(i18nRelation.from.url || assetGraph.findBaseAssetForRelation(i18nRelation).url, i18nRelation.to.url) +
                                        "');\n";
                                }).join("");
                                var matchSplitAfterLastOneIncludeLine = text.match(/^([\s\S]*one\.include[^\n]*\n)([\s\S]*)$/);
                                if (matchSplitAfterLastOneIncludeLine) {
                                    cb(null, matchSplitAfterLastOneIncludeLine[1] + "\n" + oneIncludeStatements + matchSplitAfterLastOneIncludeLine[2]);
                                } else {
                                    cb(null, oneIncludeStatements + text);
                                }
                            }));
                        };
                    });
                    cb();
                })
                ['catch'](cb);
        }));
    },
    transforms.prettyPrintAssets({type: 'I18n', isDirty: true}),
    transforms.stats(),
    transforms.writeAssetsToDisc({type: ['I18n', 'JavaScript'], isDirty: true})
).run();
