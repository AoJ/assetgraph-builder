#!/usr/bin/env node

var fs = require('fs'),
    _ = require('underscore'),
    seq = require('seq'),
    AssetGraph = require('assetgraph'),
    transforms = require('../lib/transforms'),
    urlTools = require('assetgraph/lib/util/urlTools'),
    commandLineOptions = require('optimist').
        usage('$0 [--root <dir>] [-o <outputJavaScriptFile>] <inputJavaScriptFile>').
        check(function (argv) {
            if (argv._.length !== 1 || !/\.js$/.test(argv._[0])) {
                throw "Please specify a single JavaScript file on the command line";
            }
        }).
        argv;

_.extend(transforms, require('../lib/transforms'));

new AssetGraph({root: commandLineOptions.root}).on('afterTransform', function (transform, elapsedTime) {
    console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
}).on('error', function (err) {
    console.error(err.stack);
    process.exit(1);
}).queue(
    transforms.registerLabelsAsCustomProtocols(commandLineOptions.label),
    transforms.loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl)),
    transforms.populate({followRelations: {type: 'JavaScriptOneInclude'}}),
    function (err, assetGraph, cb) {
        seq()
            .extend(assetGraph.findAssets({isInitial: true}))
            .seq(function (initialAsset) {
                this(null, assetGraph.collectAssetsPostOrder(initialAsset, {to: {type: 'JavaScript'}}));
            })
            .flatten()
            .parMap(function (asset) {
                assetGraph.findRelations({from: asset}).forEach(function (outgoingRelation) {
                    assetGraph.detachAndRemoveRelation(outgoingRelation);
                });
                asset.getText(this);
            })
            .unflatten()
            .seq(function (texts) {
                var flattenedText = texts.join("\n").replace(/one\.include\(([^\)]*)\);?\n?/g, "");
                if ('o' in commandLineOptions) {
                    fs.writeFile(commandLineOptions.o, flattenedText, AssetGraph.assets.JavaScript.prototype.encoding, cb);
                } else {
                    console.log(flattenedText);
                }
            })
            .seq(function () {
                cb();
            })
            ['catch'](cb);
    }
).run();
